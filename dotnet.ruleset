<?xml version="1.0" encoding="utf-8"?>
<RuleSet Name="The Rules" ToolsVersion="10.0">
	<Rules AnalyzerId="StyleCop.Analyzers" RuleNamespace="StyleCop.Analyzers">
		<Rule Id="SA0001" Action="None" /> <!-- Don't use XML documentation -->
		<Rule Id="SA1101" Action="None" /> <!-- Don't prefix local calls with 'this' -->
		<Rule Id="SA1300" Action="None" /> <!-- Don't use uppercase -->
		<Rule Id="SA1304" Action="None" /> <!-- No really -->
		<Rule Id="SA1303" Action="None" /> <!-- No really! -->
		<Rule Id="SA1311" Action="None" /> <!-- No, really! -->
		<Rule Id="SA1400" Action="None" /> <!-- Don't need explicit 'private' -->
		<Rule Id="SA1500" Action="None" /> <!-- Use egyptian braces -->
		<Rule Id="SA1502" Action="None" /> <!-- Put generic type constraints inline -->
		<Rule Id="SA1127" Action="None" /> <!-- Allow single-line methods -->
		<Rule Id="SA1503" Action="None" /> <!-- Omit braces -->
		<Rule Id="SA1519" Action="None" /> <!-- No really, omit braces -->
		<Rule Id="SA1520" Action="None" /> <!-- if (foo) return 1; else { ... } -->
		<Rule Id="SA1134" Action="None" /> <!-- Allow inline attributes -->
		<Rule Id="SA1107" Action="None" /> <!-- Two statements, one line -->
		<Rule Id="SA1407" Action="None" /> <!-- Allow operator precedence -->
		<Rule Id="SA1408" Action="None" /> <!-- No really, allow operator precedence -->
		<Rule Id="SA1128" Action="None" /> <!-- Allow base() inline -->
		<Rule Id="SA1501" Action="None" /> <!-- Allow single-line statement -->
		<Rule Id="SA1116" Action="None" /> <!-- Two parameters, one line -->
		<Rule Id="SA1117" Action="None" /> <!-- Two parameters, one line, again? -->
		<Rule Id="SA1115" Action="None" /> <!-- Allow line comment before argument -->
		<Rule Id="SA1012" Action="None" /> <!-- Allow '{}' -->
		<Rule Id="SA1013" Action="None" /> <!-- Allow '{}' -->
		<Rule Id="SA1633" Action="None" /> <!-- No file header -->
		<Rule Id="SA1515" Action="None" /> <!-- Don't require blank line after comment -->
		<Rule Id="SA1402" Action="None" /> <!-- Allow multi-class files -->
		<Rule Id="SA1649" Action="None" /> <!-- Allow type name to not match file name -->
		<Rule Id="SA1307" Action="None" /> <!-- Don't require elements to be separated by blank lines -->
		<Rule Id="SA1512" Action="None" /> <!-- Allow blank line after comment -->
		<Rule Id="SA1516" Action="None" /> <!-- No really -->
		<Rule Id="SA1513" Action="None" /> <!-- Allow no whitespace after closing brace -->
		<Rule Id="SA1401" Action="None" /> <!-- Allow non-private fields -->
		<Rule Id="SA1309" Action="None" /> <!-- Allow underscore in field name -->
		<Rule Id="SA1302" Action="None" /> <!-- Interfaces do not begin with 'I' -->
		<Rule Id="SA1214" Action="None" /> <!-- Don't require readonly fields to appear first -->
		<Rule Id="SA1314" Action="None" /> <!-- Don't name every type parameter 'T' -->
		<Rule Id="SA1136" Action="None" /> <!-- Allow single-line enum -->
		<Rule Id="SA1507" Action="None" /> <!-- No idea how to fix this -->
		<Rule Id="SA1133" Action="None" /> <!-- Allow multiple attributes together -->

		<!--
		TODO: I currently need a few '_' for parameter names to avoid syntax highlight issues
		https://github.com/dotnet/csharp-tmLanguage/issues/46
		-->
		<Rule Id="SA1313" Action="None" />
		<!--  -->

		<Rule Id="SA1413" Action="None" /> <!-- TODO: this rule is buggy with single-line enums -->
		<Rule Id="SA1008" Action="None" /> <!-- TODO: stylecop bug: This doesn't play well with tuples -->
		<Rule Id="SA1005" Action="None" /> <!-- TODO: comment must begin with space -->
	</Rules>

	<Rules AnalyzerId="CodeCracker.CSharp" RuleNamespace="CodeCracker.CSharp">
		<Rule Id="CC0031" Action="None" /> <!-- I don't use nulls -->

		<Rule Id="CC0030" Action="Warning" /> <!-- Prefer 'const' locals -->
		<Rule Id="CC0006" Action="Warning" /> <!-- Prefor 'foreach' to 'for' loop -->
		<Rule Id="CC0018" Action="Warning" /> <!-- Prefer existence operator -->
		<Rule Id="CC0019" Action="Warning" /> <!-- Prefer 'switch' to 'if' -->
		<Rule Id="CC0020" Action="Warning" /> <!-- Prefer method group to lambda -->
		<!-- <Rule Id="CC0037" Action="Warning" /> TODO: Do not comment out code. -->
		<Rule Id="CC0038" Action="Warning" /> <!-- Prefer expression-bodied method -->
		<Rule Id="CC0048" Action="Warning" /> <!-- Prefer string interpolation -->
		<Rule Id="CC0026" Action="Warning" /> <!-- Prefer to use extension method as extension -->
		<Rule Id="CC0032" Action="Warning" /> <!-- Remember to dispose disposable fields -->
		<Rule Id="CC0049" Action="Warning" /> <!-- Avoid redundant boolean comparisons -->
		<Rule Id="CC0052" Action="Warning" /> <!-- Prefer readonly fields -->
		<Rule Id="CC0068" Action="Warning" /> <!-- Warn on unused private method -->
		<Rule Id="CC0089" Action="Warning" /> <!-- No empty 'else' block -->
		<!-- <Rule Id="CC0045" Action="Warning" /> Prefer verbatim strings (TODO: this rule is seriously broken!) -->
		<!-- <Rule Id="CC0073" Action="Warning" /> Use braces in switch -->
	</Rules>

	<Rules AnalyzerId="SonarAnalyzer.CSharp" RuleNamespace="SonarAnalyzer.CSharp">
		<Rule Id="S2436" Action="None" /> <!-- Allow more than 2 generic parameters -->
		<Rule Id="S125" Action="None" /> <!-- Too many false positives for commented-out code -->
		<Rule Id="S2372" Action="None" /> <!-- Allow to throw exceptions in getters -->
		<Rule Id="S3903" Action="None" /> <!-- Allow types outside of namespaces -->
		<Rule Id="S3459" Action="None" /> <!-- Allow "unassigned" fields; false positive for Late<T> -->
		<Rule Id="S907" Action="None" /> <!-- Allow 'goto' -->
		<Rule Id="S101" Action="None" /> <!-- Allow interface name to start with 'I', as in 'Identifiable' -->
		<Rule Id="S3897" Action="None" /> <!-- Allow types to not implement IEquatable -->
		<Rule Id="S3871" Action="None" /> <!-- Don't make exceptions public -->
		<Rule Id="S1206" Action="None" /> <!-- False potive for class inheriting 'Equals' -->
		<Rule Id="S3881" Action="None" /> <!-- No idea how to fix this -->
		<Rule Id="S3925" Action="None" /> <!-- Ditto -->
		<Rule Id="S1117" Action="None" /> <!-- Allow local variable to shadow method. Useful in `class C { int x; static create(int x) { ... } }` -->
		<Rule Id="S3877" Action="None" /> <!-- Allow throwing exceptions -->
	</Rules>
</RuleSet>
