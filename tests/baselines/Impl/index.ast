Module(
  loc: 0-155,
  imports: [Relative(
    loc: 7-21,
    path: RelPath(
      nParents: 1,
      relToParent: ["AbstractClass"]))],
  klass: ClassDeclaration(
    loc: 23-155,
    typeParameters: [],
    head: Slots(
      loc: 23-40,
      slots: [Slot(
        loc: 30-39,
        mutable: false,
        ty: Ty(
          loc: 34-37,
          effect: "pure",
          name: "Nat",
          tyArgs: []),
        name: "x")]),
    supers: [Super(
      loc: 40-67,
      name: "AbstractClass",
      impls: [Impl(
        loc: 58-67,
        name: "n",
        parameterNames: [],
        body: Access(
          loc: 64-65,
          name: "x"))])],
    methods: [Method(
      loc: 67-155,
      isStatic: true,
      typeParameters: [],
      returnTy: Ty(
        loc: 71-75,
        effect: "pure",
        name: "Void",
        tyArgs: []),
      name: "main",
      parameters: [],
      body: Let(
        loc: 84-102,
        assigned: Single(
          loc: 84-92,
          name: "instance"),
        value: New(
          loc: 95-102,
          tyArgs: [],
          args: [Literal(
            loc: 99-100,
            value: 1)]),
        then: Let(
          loc: 102-138,
          assigned: Single(
            loc: 102-106,
            name: "gotN"),
          value: Call(
            loc: 109-138,
            target: StaticAccess(
              loc: 109-127,
              className: "AbstractClass",
              staticMethodName: "getN"),
            typeArguments: [],
            args: [Access(
              loc: 128-136,
              name: "instance")]),
          then: Assert(
            loc: 138-155,
            asserted: OperatorCall(
              loc: 145-155,
              oper: "==",
              right: Literal(
                loc: 153-154,
                value: 1))))))]))
