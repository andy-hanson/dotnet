Module(
  loc: 0-135,
  imports: [],
  klass: Klass(
    loc: 0-135,
    head: null,
    supers: [],
    methods: [Method(
      loc: 0-135,
      isStatic: true,
      returnTy: Ty(
        loc: 4-8,
        cls: Access(
          loc: 4-8,
          name: "Void")),
      name: "main",
      parameters: [],
      body: Let(
        loc: 19-103,
        assigned: Single(
          loc: 17-18,
          name: "x"),
        value: Try(
          loc: 21-103,
          _do: Seq(
            loc: 33-65,
            first: Assert(
              loc: 33-49,
              asserted: Literal(
                loc: 40-45,
                value: false)),
            then: Literal(
              loc: 49-62,
              value: "unreachable")),
          _catch: Catch(
            loc: 65-103,
            exceptionTy: Ty(
              loc: 71-80,
              cls: Access(
                loc: 71-80,
                name: "Exception")),
            exceptionName: "e",
            then: Call(
              loc: 86-101,
              target: GetProperty(
                loc: 86-99,
                target: Access(
                  loc: 86-87,
                  name: "e"),
                propertyName: "description"),
              args: [])),
          _finally: null),
        then: Assert(
          loc: 103-135,
          asserted: OperatorCall(
            loc: 110-135,
            oper: "==",
            right: Literal(
              loc: 115-134,
              value: "Assertion failed.")))))]))
