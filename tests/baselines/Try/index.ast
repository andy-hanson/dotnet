Module(
  loc: 0-153,
  imports: [Global(
    loc: 7-16,
    path: ["Exception"])],
  klass: Klass(
    loc: 18-153,
    head: null,
    supers: [],
    methods: [Method(
      loc: 18-153,
      isStatic: true,
      returnTy: Ty(
        loc: 22-26,
        cls: Access(
          loc: 22-26,
          name: "Void")),
      name: "main",
      parameters: [],
      body: Let(
        loc: 37-121,
        assigned: Single(
          loc: 35-36,
          name: "x"),
        value: Try(
          loc: 39-121,
          _do: Seq(
            loc: 51-83,
            first: Assert(
              loc: 51-67,
              asserted: Literal(
                loc: 58-63,
                value: false)),
            then: Literal(
              loc: 67-80,
              value: "unreachable")),
          _catch: Catch(
            loc: 83-121,
            exceptionTy: Ty(
              loc: 89-98,
              cls: Access(
                loc: 89-98,
                name: "Exception")),
            exceptionName: "e",
            then: Call(
              loc: 104-119,
              target: GetProperty(
                loc: 104-117,
                target: Access(
                  loc: 104-105,
                  name: "e"),
                propertyName: "description"),
              args: [])),
          _finally: null),
        then: Assert(
          loc: 121-153,
          asserted: OperatorCall(
            loc: 128-153,
            oper: "==",
            right: Literal(
              loc: 133-152,
              value: "Assertion failed.")))))]))
