ClassDeclaration(
  loc: 18-153,
  head: Static(),
  membersMap: Dict<Sym, MemberDeclaration>(
    main: MethodWithBody(
      loc: 18-153,
      isStatic: true,
      returnTy: Id(
        effect: "pure",
        clsId: Id(
          classDeclarationId: "Void",
          typeArgumentIds: [])),
      name: "main",
      selfEffect: "pure",
      parameters: [],
      body: Let(
        loc: 35-121,
        assigned: Single(
          loc: 35-36,
          name: "x"),
        value: Try(
          loc: 39-121,
          _do: Seq(
            loc: 51-83,
            action: Assert(
              loc: 51-67,
              asserted: Literal(
                loc: 58-63,
                value: false)),
            then: Literal(
              loc: 67-80,
              value: "unreachable")),
          _catch: Catch(
            loc: 83-121,
            exceptionTy: Id(
              effect: "pure",
              clsId: Id(
                classDeclarationId: "Exception",
                typeArgumentIds: [])),
            caught: Single(
              loc: 99-100,
              name: "e"),
            then: InstanceMethodCall(
              loc: 104-119,
              target: AccessLocal(
                local: "e"),
              method: MethodInst(
                decl: Id(
                  klassId: "Exception",
                  name: "description"),
                typeArguments: []),
              args: [])),
          _finally: null),
        then: Assert(
          loc: 121-153,
          asserted: InstanceMethodCall(
            loc: 128-153,
            target: AccessLocal(
              local: "x"),
            method: MethodInst(
              decl: Id(
                klassId: "String",
                name: "=="),
              typeArguments: []),
            args: [Literal(
              loc: 133-152,
              value: "Assertion failed.")]))))))
