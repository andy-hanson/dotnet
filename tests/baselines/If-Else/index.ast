Module(
  loc: 0-100,
  imports: [],
  klass: ClassDeclaration(
    loc: 0-100,
    typeParameters: [],
    head: null,
    supers: [],
    methods: [
      Method(
        loc: 0-62,
        isStatic: true,
        typeParameters: [],
        returnTy: Ty(
          loc: 4-8,
          effect: "pure",
          name: "Void",
          tyArgs: []),
        name: "main",
        parameters: [],
        body: Seq(
          loc: 17-62,
          first: Assert(
            loc: 17-39,
            asserted: OperatorCall(
              loc: 24-39,
              oper: "==",
              right: Literal(
                loc: 36-37,
                value: 1))),
          then: Assert(
            loc: 39-62,
            asserted: OperatorCall(
              loc: 46-62,
              oper: "==",
              right: Literal(
                loc: 59-60,
                value: 2))))),
      Method(
        loc: 62-100,
        isStatic: true,
        typeParameters: [],
        returnTy: Ty(
          loc: 66-69,
          effect: "pure",
          name: "Nat",
          tyArgs: []),
        name: "f",
        parameters: [Parameter(
          loc: 72-78,
          ty: Ty(
            loc: 72-76,
            effect: "pure",
            name: "Bool",
            tyArgs: []),
          name: "b")],
        body: IfElse(
          loc: 81-100,
          test: Access(
            loc: 84-85,
            name: "b"),
          then: Literal(
            loc: 91-92,
            value: 1),
          else: Literal(
            loc: 98-99,
            value: 2)))
    ]))
