Klass(
  loc: 0-100,
  head: Static(),
  membersMap: Dict<Sym, Member>(
    main: MethodWithBody(
      loc: 0-62,
      isStatic: true,
      returnTy: Id(
        effect: "pure",
        clsId: "Void"),
      name: "main",
      selfEffect: "pure",
      parameters: [],
      body: Seq(
        loc: 17-62,
        action: Assert(
          loc: 17-39,
          asserted: InstanceMethodCall(
            loc: 24-39,
            target: StaticMethodCall(
              method: Id(
                klassId: "",
                name: "f"),
              args: [Literal(
                loc: 27-31,
                value: true)]),
            method: Id(
              klassId: "Nat",
              name: "=="),
            args: [Literal(
              loc: 36-37,
              value: 1)])),
        then: Assert(
          loc: 39-62,
          asserted: InstanceMethodCall(
            loc: 46-62,
            target: StaticMethodCall(
              method: Id(
                klassId: "",
                name: "f"),
              args: [Literal(
                loc: 49-54,
                value: false)]),
            method: Id(
              klassId: "Nat",
              name: "=="),
            args: [Literal(
              loc: 59-60,
              value: 2)])))),
    f: MethodWithBody(
      loc: 62-100,
      isStatic: true,
      returnTy: Id(
        effect: "pure",
        clsId: "Nat"),
      name: "f",
      selfEffect: "pure",
      parameters: [Parameter(
        loc: 72-78,
        ty: Id(
          effect: "pure",
          clsId: "Bool"),
        name: "b",
        index: 0)],
      body: IfElse(
        loc: 81-100,
        test: AccessParameter(
          loc: 84-85,
          param: Parameter(
            loc: 72-78,
            ty: Id(
              effect: "pure",
              clsId: "Bool"),
            name: "b",
            index: 0)),
        then: Literal(
          loc: 91-92,
          value: 1),
        else: Literal(
          loc: 98-99,
          value: 2)))))
