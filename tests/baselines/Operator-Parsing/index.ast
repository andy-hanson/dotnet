Module(
  loc: 0-145,
  imports: [],
  klass: Klass(
    loc: 0-145,
    head: null,
    supers: [],
    methods: [
      Method(
        loc: 0-116,
        isStatic: true,
        returnTy: Ty(
          loc: 4-8,
          cls: Access(
            loc: 4-8,
            name: "Void")),
        name: "main",
        parameters: [],
        body: Let(
          loc: 19-32,
          assigned: Single(
            loc: 17-18,
            name: "x"),
          value: OperatorCall(
            loc: 21-32,
            oper: "*",
            right: Literal(
              loc: 29-30,
              value: 3)),
          then: Seq(
            loc: 32-116,
            first: Assert(
              loc: 32-47,
              asserted: OperatorCall(
                loc: 39-47,
                oper: "==",
                right: Literal(
                  loc: 44-45,
                  value: 9))),
            then: Let(
              loc: 49-65,
              assigned: Single(
                loc: 47-48,
                name: "y"),
              value: OperatorCall(
                loc: 51-65,
                oper: "+",
                right: Literal(
                  loc: 62-63,
                  value: 1)),
              then: Seq(
                loc: 65-116,
                first: Assert(
                  loc: 65-81,
                  asserted: OperatorCall(
                    loc: 72-81,
                    oper: "==",
                    right: Literal(
                      loc: 77-79,
                      value: 19))),
                then: Let(
                  loc: 83-100,
                  assigned: Single(
                    loc: 81-82,
                    name: "z"),
                  value: Call(
                    loc: 85-100,
                    target: Access(
                      loc: 85-91,
                      name: "double"),
                    args: [OperatorCall(
                      loc: 93-100,
                      oper: "+",
                      right: Literal(
                        loc: 97-98,
                        value: 1))]),
                  then: Assert(
                    loc: 100-116,
                    asserted: OperatorCall(
                      loc: 107-116,
                      oper: "==",
                      right: Literal(
                        loc: 112-114,
                        value: 20))))))))),
      Method(
        loc: 116-145,
        isStatic: true,
        returnTy: Ty(
          loc: 120-123,
          cls: Access(
            loc: 120-123,
            name: "Nat")),
        name: "double",
        parameters: [Parameter(
          loc: 131-136,
          ty: Ty(
            loc: 131-134,
            cls: Access(
              loc: 131-134,
              name: "Nat")),
          name: "x")],
        body: OperatorCall(
          loc: 139-145,
          oper: "*",
          right: Literal(
            loc: 143-144,
            value: 2)))
    ]))
