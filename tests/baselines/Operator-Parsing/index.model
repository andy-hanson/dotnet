Klass(
  loc: 0-145,
  head: Static(),
  membersMap: Dict<Sym, Member>(
    main: MethodWithBody(
      loc: 0-116,
      isStatic: true,
      returnTy: "Void",
      name: "main",
      parameters: [],
      body: Let(
        loc: 19-32,
        assigned: Single(
          loc: 17-18,
          name: "x"),
        value: InstanceMethodCall(
          loc: 21-32,
          target: InstanceMethodCall(
            loc: 21-28,
            target: Literal(
              loc: 21-22,
              value: 1),
            method: Id(
              klassId: "Nat",
              name: "+"),
            args: [Literal(
              loc: 25-26,
              value: 2)]),
          method: Id(
            klassId: "Nat",
            name: "*"),
          args: [Literal(
            loc: 29-30,
            value: 3)]),
        then: Seq(
          loc: 32-116,
          action: Assert(
            loc: 32-47,
            asserted: InstanceMethodCall(
              loc: 39-47,
              target: AccessLocal(
                local: "x"),
              method: Id(
                klassId: "Nat",
                name: "=="),
              args: [Literal(
                loc: 44-45,
                value: 9)])),
          then: Let(
            loc: 49-65,
            assigned: Single(
              loc: 47-48,
              name: "y"),
            value: InstanceMethodCall(
              loc: 51-65,
              target: StaticMethodCall(
                method: Id(
                  klassId: "",
                  name: "double"),
                args: [AccessLocal(
                  local: "x")]),
              method: Id(
                klassId: "Nat",
                name: "+"),
              args: [Literal(
                loc: 62-63,
                value: 1)]),
            then: Seq(
              loc: 65-116,
              action: Assert(
                loc: 65-81,
                asserted: InstanceMethodCall(
                  loc: 72-81,
                  target: AccessLocal(
                    local: "y"),
                  method: Id(
                    klassId: "Nat",
                    name: "=="),
                  args: [Literal(
                    loc: 77-79,
                    value: 19)])),
              then: Let(
                loc: 83-100,
                assigned: Single(
                  loc: 81-82,
                  name: "z"),
                value: StaticMethodCall(
                  method: Id(
                    klassId: "",
                    name: "double"),
                  args: [InstanceMethodCall(
                    loc: 93-100,
                    target: AccessLocal(
                      local: "x"),
                    method: Id(
                      klassId: "Nat",
                      name: "+"),
                    args: [Literal(
                      loc: 97-98,
                      value: 1)])]),
                then: Assert(
                  loc: 100-116,
                  asserted: InstanceMethodCall(
                    loc: 107-116,
                    target: AccessLocal(
                      local: "z"),
                    method: Id(
                      klassId: "Nat",
                      name: "=="),
                    args: [Literal(
                      loc: 112-114,
                      value: 20)])))))))),
    double: MethodWithBody(
      loc: 116-145,
      isStatic: true,
      returnTy: "Nat",
      name: "double",
      parameters: [Parameter(
        loc: 131-136,
        ty: "Nat",
        name: "x",
        index: 0)],
      body: InstanceMethodCall(
        loc: 139-145,
        target: AccessParameter(
          loc: 139-140,
          param: Parameter(
            loc: 131-136,
            ty: "Nat",
            name: "x",
            index: 0)),
        method: Id(
          klassId: "Nat",
          name: "*"),
        args: [Literal(
          loc: 143-144,
          value: 2)]))))
