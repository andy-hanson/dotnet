Module(
  loc: 0-502,
  imports: [],
  klass: Klass(
    loc: 0-502,
    head: null,
    supers: [],
    methods: [
      Method(
        loc: 0-120,
        isStatic: true,
        returnTy: Ty(
          loc: 4-8,
          cls: Access(
            loc: 4-8,
            name: "Void")),
        name: "main",
        parameters: [],
        body: Seq(
          loc: 17-120,
          first: Assert(
            loc: 17-45,
            asserted: OperatorCall(
              loc: 24-45,
              oper: "==",
              right: Literal(
                loc: 39-42,
                value: 120))),
          then: Seq(
            loc: 45-120,
            first: Assert(
              loc: 45-70,
              asserted: OperatorCall(
                loc: 52-70,
                oper: "==",
                right: Literal(
                  loc: 67-68,
                  value: 0))),
            then: Seq(
              loc: 70-120,
              first: Assert(
                loc: 70-95,
                asserted: OperatorCall(
                  loc: 77-95,
                  oper: "==",
                  right: Literal(
                    loc: 92-93,
                    value: 1))),
              then: Assert(
                loc: 95-120,
                asserted: OperatorCall(
                  loc: 102-120,
                  oper: "==",
                  right: Literal(
                    loc: 117-118,
                    value: 8))))))),
      Method(
        loc: 120-172,
        isStatic: true,
        returnTy: Ty(
          loc: 124-127,
          cls: Access(
            loc: 124-127,
            name: "Nat")),
        name: "factorial",
        parameters: [Parameter(
          loc: 138-143,
          ty: Ty(
            loc: 138-141,
            cls: Access(
              loc: 138-141,
              name: "Nat")),
          name: "n")],
        body: Call(
          loc: 146-172,
          target: Access(
            loc: 146-165,
            name: "factorial-recursive"),
          args: [
            Access(
              loc: 166-167,
              name: "n"),
            Literal(
              loc: 169-170,
              value: 1)
          ])),
      Method(
        loc: 172-274,
        isStatic: true,
        returnTy: Ty(
          loc: 176-179,
          cls: Access(
            loc: 176-179,
            name: "Nat")),
        name: "factorial-recursive",
        parameters: [
          Parameter(
            loc: 200-205,
            ty: Ty(
              loc: 200-203,
              cls: Access(
                loc: 200-203,
                name: "Nat")),
            name: "n"),
          Parameter(
            loc: 207-214,
            ty: Ty(
              loc: 207-210,
              cls: Access(
                loc: 207-210,
                name: "Nat")),
            name: "acc")
        ],
        body: WhenTest(
          loc: 217-274,
          cases: [Case(
            loc: 217-240,
            test: OperatorCall(
              loc: 217-234,
              oper: "==",
              right: Literal(
                loc: 229-230,
                value: 0)),
            result: Access(
              loc: 234-237,
              name: "acc"))],
          elseResult: Recur(
            loc: 248-274,
            args: [
              Call(
                loc: 255-263,
                target: GetProperty(
                  loc: 255-261,
                  target: Access(
                    loc: 255-256,
                    name: "n"),
                  propertyName: "decr"),
                args: []),
              OperatorCall(
                loc: 265-274,
                oper: "*",
                right: Access(
                  loc: 271-272,
                  name: "n"))
            ]))),
      Method(
        loc: 274-372,
        isStatic: true,
        returnTy: Ty(
          loc: 278-281,
          cls: Access(
            loc: 278-281,
            name: "Nat")),
        name: "fibonacci",
        parameters: [Parameter(
          loc: 292-297,
          ty: Ty(
            loc: 292-295,
            cls: Access(
              loc: 292-295,
              name: "Nat")),
          name: "n")],
        body: WhenTest(
          loc: 300-372,
          cases: [
            Case(
              loc: 300-321,
              test: OperatorCall(
                loc: 300-317,
                oper: "==",
                right: Literal(
                  loc: 312-313,
                  value: 0)),
              result: Literal(
                loc: 317-318,
                value: 0)),
            Case(
              loc: 321-335,
              test: OperatorCall(
                loc: 321-331,
                oper: "==",
                right: Literal(
                  loc: 326-327,
                  value: 1)),
              result: Literal(
                loc: 331-332,
                value: 1))
          ],
          elseResult: Call(
            loc: 343-372,
            target: Access(
              loc: 343-362,
              name: "fibonacci-recursive"),
            args: [
              Access(
                loc: 363-364,
                name: "n"),
              Literal(
                loc: 366-367,
                value: 0),
              Literal(
                loc: 369-370,
                value: 1)
            ]))),
      Method(
        loc: 372-502,
        isStatic: true,
        returnTy: Ty(
          loc: 376-379,
          cls: Access(
            loc: 376-379,
            name: "Nat")),
        name: "fibonacci-recursive",
        parameters: [
          Parameter(
            loc: 400-405,
            ty: Ty(
              loc: 400-403,
              cls: Access(
                loc: 400-403,
                name: "Nat")),
            name: "n"),
          Parameter(
            loc: 407-415,
            ty: Ty(
              loc: 407-410,
              cls: Access(
                loc: 407-410,
                name: "Nat")),
            name: "acc1"),
          Parameter(
            loc: 417-425,
            ty: Ty(
              loc: 417-420,
              cls: Access(
                loc: 417-420,
                name: "Nat")),
            name: "acc2")
        ],
        body: WhenTest(
          loc: 428-502,
          cases: [Case(
            loc: 428-459,
            test: OperatorCall(
              loc: 428-445,
              oper: "==",
              right: Literal(
                loc: 440-441,
                value: 2)),
            result: OperatorCall(
              loc: 445-459,
              oper: "+",
              right: Access(
                loc: 452-456,
                name: "acc2")))],
          elseResult: Recur(
            loc: 467-502,
            args: [
              Call(
                loc: 474-482,
                target: GetProperty(
                  loc: 474-480,
                  target: Access(
                    loc: 474-475,
                    name: "n"),
                  propertyName: "decr"),
                args: []),
              Access(
                loc: 484-488,
                name: "acc2"),
              OperatorCall(
                loc: 490-502,
                oper: "+",
                right: Access(
                  loc: 497-501,
                  name: "acc2"))
            ])))
    ]))
