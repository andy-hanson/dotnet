Module(
  loc: 0-118,
  imports: [],
  klass: Klass(
    loc: 0-118,
    head: Static(
      loc: 0-8),
    supers: [],
    methods: [
      Method(
        loc: 8-50,
        isStatic: true,
        returnTy: Access(
          loc: 12-16,
          name: "Void"),
        name: "main",
        parameters: [],
        body: Let(
          loc: 27-35,
          assigned: Single(
            loc: 25-26,
            name: "x"),
          value: Call(
            loc: 29-35,
            target: Access(
              loc: 29-30,
              name: "f"),
            args: [Literal(
              loc: 31-33,
              value: 10)]),
          then: Assert(
            loc: 35-50,
            asserted: OperatorCall(
              loc: 42-50,
              oper: "==",
              right: Literal(
                loc: 47-48,
                value: 0))))),
      Method(
        loc: 50-118,
        isStatic: true,
        returnTy: Access(
          loc: 54-57,
          name: "Int"),
        name: "f",
        parameters: [Parameter(
          loc: 60-65,
          ty: Access(
            loc: 60-63,
            name: "Int"),
          name: "i")],
        body: WhenTest(
          loc: 68-118,
          cases: [Case(
            loc: 75-89,
            test: OperatorCall(
              loc: 75-85,
              oper: "==",
              right: Literal(
                loc: 80-81,
                value: 0)),
            result: Literal(
              loc: 85-86,
              value: 0))],
          elseResult: Let(
            loc: 99-110,
            assigned: Single(
              loc: 97-98,
              name: "m"),
            value: OperatorCall(
              loc: 101-110,
              oper: "-",
              right: Literal(
                loc: 105-106,
                value: 1)),
            then: Recur(
              loc: 110-118,
              args: [Access(
                loc: 116-117,
                name: "m")]))))
    ]))
