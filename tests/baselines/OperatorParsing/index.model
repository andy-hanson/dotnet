Klass(
  loc: 0-153,
  head: Static(
    loc: 0-8),
  membersMap: Dict<Sym, Member>(
    main: MethodWithBody(
      loc: 8-124,
      isStatic: true,
      returnTy: "Void",
      name: "main",
      parameters: [],
      body: Let(
        loc: 27-40,
        assigned: Single(
          loc: 25-26,
          name: "x"),
        value: InstanceMethodCall(
          loc: 29-40,
          target: InstanceMethodCall(
            loc: 29-36,
            target: Literal(
              loc: 29-30,
              value: 1),
            method: Id(
              klassId: "Int",
              name: "+"),
            args: [Literal(
              loc: 33-34,
              value: 2)]),
          method: Id(
            klassId: "Int",
            name: "*"),
          args: [Literal(
            loc: 37-38,
            value: 3)]),
        then: Seq(
          loc: 40-124,
          action: Assert(
            loc: 40-55,
            asserted: InstanceMethodCall(
              loc: 47-55,
              target: AccessLocal(
                local: "x"),
              method: Id(
                klassId: "Int",
                name: "=="),
              args: [Literal(
                loc: 52-53,
                value: 9)])),
          then: Let(
            loc: 57-73,
            assigned: Single(
              loc: 55-56,
              name: "y"),
            value: InstanceMethodCall(
              loc: 59-73,
              target: StaticMethodCall(
                method: Id(
                  klassId: "",
                  name: "double"),
                args: [AccessLocal(
                  local: "x")]),
              method: Id(
                klassId: "Int",
                name: "+"),
              args: [Literal(
                loc: 70-71,
                value: 1)]),
            then: Seq(
              loc: 73-124,
              action: Assert(
                loc: 73-89,
                asserted: InstanceMethodCall(
                  loc: 80-89,
                  target: AccessLocal(
                    local: "y"),
                  method: Id(
                    klassId: "Int",
                    name: "=="),
                  args: [Literal(
                    loc: 85-87,
                    value: 19)])),
              then: Let(
                loc: 91-108,
                assigned: Single(
                  loc: 89-90,
                  name: "z"),
                value: StaticMethodCall(
                  method: Id(
                    klassId: "",
                    name: "double"),
                  args: [InstanceMethodCall(
                    loc: 101-108,
                    target: AccessLocal(
                      local: "x"),
                    method: Id(
                      klassId: "Int",
                      name: "+"),
                    args: [Literal(
                      loc: 105-106,
                      value: 1)])]),
                then: Assert(
                  loc: 108-124,
                  asserted: InstanceMethodCall(
                    loc: 115-124,
                    target: AccessLocal(
                      local: "z"),
                    method: Id(
                      klassId: "Int",
                      name: "=="),
                    args: [Literal(
                      loc: 120-122,
                      value: 20)])))))))),
    double: MethodWithBody(
      loc: 124-153,
      isStatic: true,
      returnTy: "Int",
      name: "double",
      parameters: [Parameter(
        loc: 139-144,
        ty: "Int",
        name: "x",
        index: 0)],
      body: InstanceMethodCall(
        loc: 147-153,
        target: AccessParameter(
          loc: 147-148,
          param: Parameter(
            loc: 139-144,
            ty: "Int",
            name: "x",
            index: 0)),
        method: Id(
          klassId: "Int",
          name: "*"),
        args: [Literal(
          loc: 151-152,
          value: 2)]))))
